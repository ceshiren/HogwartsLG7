# 装饰器最重要的功能是增强已有的函数

# a 是最基础函数，就相当于框架中的 find 方法
# 如果想对 a 进行增强的话，可以直接向 a 中添加代码
# 问题：如果功能越来越多，每个功能代码都写在 a 函数中的话， a 代码就会越来越多。 find 方法也是同样问题
# 解决：如何不改动 a 代码，对 a 进行功能增强


def a():
    print("hello")
    print("我是 a")
    print("good bye")


# 装饰器定义 b
# 0. 定义装饰器， 可以是函数，也可以是类，比如下面代码定义了装饰器 b ，b 的名字可以随便取
# 1. b 的参数是被装饰的对象，参数名可以随便取
# 2. 在 b 中要声明一个函数，函数的名字可以随便取，但是一定要和 return 的值一样。比如 函数的名字叫 c ，return 的值也是 c
# 3. 如何使用装饰器？详见 c 代码
# 4. 如果装饰的是 c ，那么 fun 是 c ，不是 c() ，一定不要混淆两者
def b(fun):
    def f():
        print("hello")
        fun()
        print("good bye")
    return f


# 1. 装饰器，要使用 @ 符号进行调用，比如 @b 调用 b 装饰器
@b
def c():
    print("我是 c")

@b
def d():
    print("我是 d")


def test_a():
    d()



def f():
    print("我是 f")

# 不加括号是函数 ID ，相当于叫了一声小明
# 加了括号，代表调用函数，相当于让小明帮忙买水
def test_f():
    f()